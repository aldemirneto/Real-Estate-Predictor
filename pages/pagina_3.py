import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import streamlit as st
import json
import shap
from xgboost import XGBRegressor

st.sidebar.markdown("""
# üè† Predi√ß√£o de Pre√ßo de Im√≥vel

Nesta p√°gina, voc√™ poder√° obter uma estimativa do pre√ßo de um im√≥vel com base em suas caracter√≠sticas.

## Caracter√≠sticas do Im√≥vel

Para realizar a predi√ß√£o do pre√ßo, ser√£o consideradas as seguintes caracter√≠sticas do im√≥vel:

- √Årea do im√≥vel
- N√∫mero de quartos
- N√∫mero de banheiros
- N√∫mero de vagas de estacionamento

## Modelo de Machine Learning

Utilizamos um modelo de Machine Learning treinado com dados de im√≥veis para fazer a predi√ß√£o do pre√ßo. O modelo aprendeu padr√µes nos dados e pode fornecer uma estimativa com base nas caracter√≠sticas fornecidas.

## Como Usar

1. Preencha as caracter√≠sticas do im√≥vel nos campos √† direita.
2. Clique no bot√£o "Prever" para obter a estimativa do pre√ßo.
3. O resultado ser√° exibido na p√°gina principal.

## Limita√ß√µes

√â importante ressaltar que essa estimativa √© baseada em dados hist√≥ricos e em um modelo preditivo. O pre√ßo real do im√≥vel pode variar de acordo com fatores externos e condi√ß√µes do mercado imobili√°rio.

## Conclus√£o

Essa p√°gina foi criada para ajudar usu√°rios a terem uma ideia aproximada do pre√ßo de um im√≥vel com base em suas caracter√≠sticas. Lembre-se de considerar outros fatores relevantes ao tomar decis√µes relacionadas √† compra ou venda de um im√≥vel.

""")

st.markdown(
    """
    <style>

    h1, h2{
        color: #3b5998;
    }
    h2 {
        margin-top: 40px;
    }
    </style>
    """,
    unsafe_allow_html=True
)


# Function to load the XGBoost model
@st.cache_resource()
def load_model():
    xgb_model = XGBRegressor()
    xgb_model.load_model('Model/xgb_model.json')
    return xgb_model


# Load the XGBoost model
xgb_model = load_model()

# Load the neighborhood encoding mapping
with open('Model/neighborhood_encoding.json', 'r') as f:
    neighborhood_encoding = json.load(f)


# Function to preprocess input data
def preprocess_input(data):
    # Create a DataFrame from the input data
    df = pd.DataFrame([data])

    # Encode the neighborhood using the loaded mapping
    df['bairro_encoded'] = df['bairro'].map(neighborhood_encoding)
    #
    # Reorder the columns to match the training data
    df = df[['area', 'quartos', 'vagas', 'banheiros', 'bairro_encoded']]

    return df


# Function to predict prices using the loaded model
def predict_prices(data):
    input_data = preprocess_input(data)
    predictions = xgb_model.predict(input_data)
    return predictions


st.title('Real Estate Price Prediction')
st.markdown("---")

# Load the dataset to get the unique neighborhood values
df = pd.read_csv('imoveis.csv', sep=';')
neighborhoods = df['bairro'].unique().tolist()

#
selected_neighborhoods = st.selectbox('Select Neighborhood(s)', neighborhoods)
area = st.number_input('Area (in square meters)', min_value=0)
bedrooms = st.number_input('Number of bedrooms', min_value=0)
bathrooms = st.number_input('Number of bathrooms', min_value=0)
parking_spaces = st.number_input('Number of parking spaces', min_value=0)

# Prepare input data
input_data = {
    'bairro': selected_neighborhoods,
    'area': area,
    'quartos': bedrooms,
    'vagas': parking_spaces,
    'banheiros': bathrooms
}

# Make the prediction
if st.button('Predict'):
    explainer = shap.Explainer(xgb_model)
    shap_values = explainer(preprocess_input(input_data))

    # Create a summary plot

    prediction = predict_prices(input_data)

    st.subheader('Pre√ßo Estimado')
    # write the price in thousands with 2 decimals

    st.success(f"O Pre√ßo do seu im√≥vel √© R${prediction[0] / 1000:.3f} mil reais")
    st.markdown("---")

    st.title("Interpreta√ß√£o Abrangente do Modelo")

    st.subheader('Entendendo a Import√¢ncia das Caracter√≠sticas')
    st.write('''
    Quando treinamos um modelo de IA, ele aprende a tomar decis√µes com base nas informa√ß√µes fornecidas por diferentes caracter√≠sticas ou vari√°veis, como idade, g√™nero, renda, entre outras, dependendo do problema que o modelo est√° tentando resolver.
    
    Ao analisar o modelo e interpretar suas previs√µes, podemos querer entender quais caracter√≠sticas t√™m mais influ√™ncia nos resultados.
     
    Isso nos ajuda a entender como o modelo est√° tomando suas decis√µes e quais aspectos s√£o mais importantes para o resultado final.''')

    st.write('---')
    st.write(
        '''
        A seguir, podemos ver um gr√°fico que mostra a import√¢ncia das caracter√≠sticas para o modelo.
        
        No contexto da aplica√ß√£o, este grafico ajuda a entender como cada caracter√≠stica contribui para a previs√£o final, tendo em cada valor no gr√°fico  a contribui√ß√£o individual de uma caracter√≠stica espec√≠fica para o pre√ßo do im√≥vel.
        
        Por exemplo, se considerarmos a caracter√≠stica "bairro_encoded" com um valor de +5571.17, isso indicaria que, em m√©dia, propriedades localizadas nesse bairro t√™m uma contribui√ß√£o positiva de 5571.17 reais para o pre√ßo do im√≥vel. 
        
        Isso significa que estar nesse bairro espec√≠fico tende a aumentar o pre√ßo do im√≥vel em compara√ß√£o com um valor de refer√™ncia, como a m√©dia geral dos pre√ßos.  
    ''')

    fig2, ax2 = plt.subplots()
    shap.waterfall_plot(shap_values[0], show=False)
    plt.title('Contribui√ß√µes Individuais das Caracter√≠sticas')
    st.pyplot(fig2)

    st.write('''
    Essas visualiza√ß√µes e interpreta√ß√µes nos ajudam a entender quais caracter√≠sticas s√£o mais relevantes para o modelo e como elas afetam as previs√µes. Com essa compreens√£o, podemos fazer ajustes ou melhorias no modelo, se necess√°rio, para garantir que ele esteja levando em considera√ß√£o as caracter√≠sticas mais importantes para a tomada de decis√µes.
    ''')

# Attribution
st.markdown("---")
st.write("Built with ‚ù§Ô∏è by Aldemir")
st.write("Check out my [GitHub](https://github.com/aldemirneto)")
